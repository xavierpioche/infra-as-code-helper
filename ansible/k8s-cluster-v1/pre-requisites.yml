
- name: Update apt cache
  apt:
    update_cache: yes
    cache_valid_time: 3600

- name: Disable swap
  shell: swapoff -a
  register: __cmd_res
  changed_when: __cmd_res.rc != 0

- name: Remove SWAP in fstab
  lineinfile:
    path: /etc/fstab
    regexp: '^/swap '
    line: '#/swap '

- name: Install containerd
  apt:
    name: containerd
    state: present

- name: Create containerd config directory before
  file:
    path: /etc/containerd
    state: directory

- name: Get checksum of containerd configuration
  stat:
    path: /etc/containerd/config.toml
  register: __containerd_toml_checksum_before

- name: Generate containerd config file
  shell: containerd config default
  register: __containerd_config
  changed_when: __containerd_config.rc != 0

- name: Save containerd config file
  copy:
    content: "{{ __containerd_config.stdout }}"
    dest: /etc/containerd/config.toml
  changed_when: __containerd_config.rc != 0

- name: Change cgroup conf
  lineinfile:
    path: /etc/containerd/config.toml
    regexp: '^(.*)SystemdCgroup = false(.*)$'
    line: '\1SystemdCgroup = true\2'
    backrefs: yes
  changed_when: False

- name: Get checksum of containerd configuration after
  stat:
    path: /etc/containerd/config.toml
  register: __containerd_toml_checksum_after

- name: Restart containerd if needed
  service:
    name: containerd
    state: restarted
    enabled: yes
#  when: __containerd_toml_checksum_after.stat.checksum != __containerd_toml_checksum_before.stat.checksum

- name: Check if containerd file exists
  stat:
    path: /etc/modules-load.d/containerd.conf
  register: __containerd_conf_exists

- name: Add containerd modules
  community.general.modprobe:
    name: "{{ item }}"
    state: present
  loop:
    - overlay
    - br_netfilter

- name: Create containerd.conf file if not exist
  copy:
    dest: /etc/modules-load.d/containerd.conf
    content: |
      overlay
      br_netfilter
  when: not __containerd_conf_exists.stat.exists
  notify: restart_containerd

- ansible.builtin.meta: flush_handlers

- name: Ensure containerd is started
  service:
    name: containerd
    state: started
    enabled: yes

- ansible.posix.sysctl:
    name: net.bridge.bridge-nf-call-ip6tables
    value: '1'
    sysctl_set: true
    state: present
    reload: true

- ansible.posix.sysctl:
    name: net.bridge.bridge-nf-call-iptables
    value: '1'
    sysctl_set: true
    state: present
    reload: true

- ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    sysctl_set: true
    state: present
    reload: true

- name: Install dependencies
  apt:
    name: "{{ kubernetes_prerequisites_packages }}"
    state: present
    update_cache: yes
    cache_valid_time: 3600

- name: Check if repo already exists
  stat:
    path: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  register: __kubernetes_apt_key

- name: Check if repo already exists
  stat:
    path: /etc/apt/sources.list.d/kubernetes.list
  register: __kubernetes_apt_source

- name: Install the key
  shell: curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  when: not __kubernetes_apt_key.stat.exists

- name: Install the repo
  shell: "echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list"
  when: not __kubernetes_apt_source.stat.exists
  notify: update_apt_cache

- ansible.builtin.meta: flush_handlers

- name: Install Kubernetes packages
  apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
    cache_valid_time: 3600
  loop:
    - "kubelet={{ kubernetes_version }}"
    - "kubeadm={{ kubernetes_version }}"
    - "kubectl={{ kubernetes_version }}"

- name: Hold kubernetes packages
  dpkg_selections:
    name: "{{ item }}"
    selection: hold
  loop:
    - kubelet
    - kubeadm
    - kubectl
