- hosts: all
  become: yes
  tasks:
    - import_tasks: zz_0-templates.yml
      vars:
         src: templates/resolv.conf.j2
         dest: /etc/resolv.conf
         dns_domain: xprd.k8s.local
         dns_server: 192.168.1.240

    - import_tasks: zz_0-templates.yml
      vars:
         src: templates/hosts.j2
         dest: /etc/hosts

    - import_tasks: zz_0-remove-cloud-init.yml
      vars:
         package_list:
           - cloud-init


    - import_tasks: zz_0-add-packages.yml
      vars:
         package_list:
           - acl

    - import_tasks: zz_2-users.yml

    - import_tasks: zz_0-templates.yml
      vars:
         src: templates/ca-config.json.j2
         dest: /tmp/ca-config.json
      when: inventory_hostname in groups["main"]

    - import_tasks: zz_0-templates.yml
      vars:
         src: templates/ca-csr.json.j2
         dest: /tmp/ca-csr.json
         key_algo: "rsa"
         key_size: 2048
         name_C: "FR"
         name_L: "MS"
         name_O: "ORANGE"
         name_OU: "DSI"
         name_ST: "GP"
      when: inventory_hostname in groups["main"]

    - import_tasks: zz_0-templates.yml
      vars:
         src: templates/ca-csr.json.j2
         dest: /tmp/kubernetes-csr.json
         key_algo: "rsa"
         key_size: 2048
         name_C: "FR"
         name_L: "MS"
         name_O: "ORANGE"
         name_OU: "DSI"
         name_ST: "GP"
      when: inventory_hostname in groups["main"]

    - import_tasks: zz_3-install-k8s.yml

    - import_tasks: zz_4-main-master-a-prepare.yml
      vars:
         masters: "192.168.10.101,192.168.10.102,192.168.10.103"
         main: "192.168.10.101"
         loadbalancer: "192.168.10.100"
      when: inventory_hostname in groups["main"]

    - import_tasks: zz_4-main-master-b-push.yml
      vars:
         fileslist:
           - ca.pem
           - kubernetes.pem
           - kubernetes-key.pem

    - import_tasks: zz_4-main-master-b-etcd-1.yml

    - import_tasks: zz_0-templates.yml
      vars:
         src: templates/etcd.service.j2
         dest: /etc/systemd/system/etcd.service
         current: "192.168.10.101"
         peer1: "192.168.10.102"
         peer2: "192.168.10.103"
      when: inventory_hostname in groups["main"]

    - import_tasks: zz_0-templates.yml
      vars:
         src: templates/etcd.service.j2
         dest: /etc/systemd/system/etcd.service
         current: "192.168.10.102"
         peer1: "192.168.10.101"
         peer2: "192.168.10.103"
      when: inventory_hostname in groups["second"]

    - import_tasks: zz_0-templates.yml
      vars:
         src: templates/etcd.service.j2
         dest: /etc/systemd/system/etcd.service
         current: "192.168.10.103"
         peer1: "192.168.10.101"
         peer2: "192.168.10.102"
      when: inventory_hostname in groups["third"]

    - import_tasks: zz_4-main-master-b-etcd-2.yml
      when: inventory_hostname in groups["masters"]

    - import_tasks: zz_0-templates.yml
      vars:
         src: templates/config.yml
         dest: /tmp/config.yml
         loadbalancer: "192.168.10.250"
         master1: "192.168.10.101"
         master2: "192.168.10.102"
         master3: "192.168.10.103"
         podscidr: "192.168.11.0/24"
         svcscidr: "192.168.12.0/24"
         dnsdomain: "xprd.k8s.local"
      when: inventory_hostname in groups["masters"]

    - name: kubeadm init on master 
      shell: kubeadm init --config=/tmp/config.yml --ignore-preflight-errors=all
      when: inventory_hostname in groups["main"]

    - name: create .kube directory
      become: yes
      become_user: kube
      file:
        path: $HOME/.kube
        state: directory
        mode: 0755
      when: inventory_hostname in groups["main"]

    - name: copies admin.conf to user's kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/kube/.kube/config
        remote_src: yes
        owner: kube
      when: inventory_hostname in groups["main"]

    - name: archive pki certificates
      shell: tar cvf /etc/kubernetes/pki.tar /etc/kubernetes/pki
      when: inventory_hostname in groups["main"]

    - name: fetch pki certificates from main
      fetch:
        src: /etc/kubernetes/pki.tar
        dest: /tmp/pki.tar
      when: inventory_hostname in groups["main"]

    - name: remove apiserver from pki.tar
      shell: cd /tmp ; tar xvf /tmp/pki.tar ; rm -f pki/apiserver.* ; rm -f /tmp/pki.tar ; tar cvf /tmp/pki.tar pki/ 
      delegate_to: localhost

    - name: copy pki certificates to other masters
      copy:
        src: /tmp/pki.tar
        dest: /tmp/pki.tar
      when: inventory_hostname in groups["seconds"]

    - name: extract pki certificate
      shell: cd /etc/kubernetes ; tar xvf /tmp/pki.tar
      when: inventory_hostname in groups["seconds"]

    - name: kubeadm init on master 
      shell: kubeadm init --config=/tmp/config.yml --ignore-preflight-errors=all
      when: inventory_hostname in groups["seconds"]

    - name: Get the token for joining the worker nodes
      shell: kubeadm token create  --print-join-command
      register: kubernetes_join_command
      when: inventory_hostname in groups["main"]

    - name: get join command
      debug:
        msg: "{{ kubernetes_join_command.stdout }}"

    - name: Copy join command to local file.
      local_action: copy content="{{ kubernetes_join_command.stdout_lines[0] }}" dest="/tmp/kubernetes_join_command" mode=0777

    - name: Copy join command from Ansiblehost to the worker nodes.
      copy:
        src: /tmp/kubernetes_join_command
        dest: /tmp/kubernetes_join_command
        mode: 0777
      when: inventory_hostname in groups["workers"]

    - name: Join the Worker nodes to the cluster.
      command: sh /tmp/kubernetes_join_command
      register: joined_or_not
      when: inventory_hostname in groups["workers"]
